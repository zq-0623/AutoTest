# -*-coding:GBK -*-import jsonimport osimport reimport timeimport pandas as pdfrom deepdiff import DeepDifffrom util.base93 import decodeimport requestsimport yamlfrom util.logTool import loggertime1 = time.strftime('%Y%m%d_%H%M%S', time.localtime())curPath = os.path.abspath(os.path.dirname(__file__))rootPath = os.path.split(curPath)[0]yaml_path = rootPath + r'/testCase/quote/quote.yaml'path = r'../testCase/AllStock/AllStock_sh.txt'date = time.strftime("%Y%m%d", time.localtime())def request(url, methods, **kwargs):    methods = methods.lower()    if methods == "get":        res = requests.Session().get(url, **kwargs)        return res    elif methods == "post":        res = requests.Session().post(url, **kwargs)        return resdef quote_yaml(path):    with open(path, 'r', encoding='gbk') as fp:        # load()函数将fp(一个支持.read()的文件类对象，包含一个JSON文档)反序列化为一个Python对象        return yaml.safe_load(fp)data = quote_yaml(yaml_path)def decode_quote(msg):    res_list = msg.split("\x03")    decoded_dict = {}    if res_list[-1] == '':        res_list.pop()    for m in range(len(res_list)):        split_list = res_list[m].split("\x02")        split_list1 = []        for item in split_list:            if item.find('\x01'):                split_list1.append(item.replace('\x01',''))        for i in range(len(split_list1)):            data_key = list(data[i].keys())[0]            data_values = list(data[i].values())[0]            if data_values == 'Y':                split_list1[i] = decode(split_list1[i])            decoded_dict[data_key] = split_list1[i]    return decoded_dictdef SseOptionQuote(url, header, **kwargs):    try:        response = requests.Session().get(url, headers=header)        response.raise_for_status()        return response    except requests.exceptions.RequestException as e:        logger.debug(f"Error while requesting url '{url}':{e}")        logger.debug(f"Error while request headers '{header}':{e}")        return Nonedef main():    # stock_lists = []    # with open(path, 'r', encoding='utf-8') as stock:    #     stock_list = json.load(stock)    #     stock_length = len(stock_list)    #     for stock_i in stock_list:    #         # stock_p = stock_i.get('p')    #         # stock_st = stock_i.get('st')    #         stock_s = stock_i.get('s')    #         # stock_t = stock_i.get('t')    #         stock_f = stock_i.get('f')    #         stock_n = stock_i.get('n')    #         stock_lists.append(stock_s)    # for symbol in stock_lists:    #     headers = {    #         "token": "MitakeWeb",    #         "Symbol": symbol    #     }        headers = {            "token": "MitakeWeb",            "Symbol": "00700.hk"        }        url = "http://114.28.169.94:22016/v3/quote"        response1 = SseOptionQuote(url, header=headers)        decode_response1 = decode_quote(response1.content.decode('utf-8'))        if response1:            logger.info(f"url1 success headers '{headers}'")            logger.info(decode_response1)        else:            logger.info(f"Failed to get response for url '{url}'")if __name__ == '__main__':    main()