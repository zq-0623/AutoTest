# -*-coding:GBK -*-import jsonimport osimport reimport timeimport pandas as pdfrom deepdiff import DeepDifffrom util.base93 import decodeimport requestsimport yamlfrom util.logTool import loggertime1 = time.strftime('%Y%m%d_%H%M%S', time.localtime())curPath = os.path.abspath(os.path.dirname(__file__))rootPath = os.path.split(curPath)[0]yaml_path = rootPath + r'/testCase/quote/line.yaml'path = r'../testCase/AllStock/AllStock_hk.txt'date = time.strftime("%Y%m%d", time.localtime())def request(url, methods, **kwargs):    methods = methods.lower()    if methods == "get":        res = requests.Session().get(url, **kwargs)        return res    elif methods == "post":        res = requests.Session().post(url, **kwargs)        return resdef quote_yaml(path):    with open(path, 'r', encoding='gbk') as fp:        # load()函数将fp(一个支持.read()的文件类对象，包含一个JSON文档)反序列化为一个Python对象        return yaml.safe_load(fp)data = quote_yaml(yaml_path)def decode_quote(msg):    res_list = msg.split("\x03")    list_result = []    if res_list[-1] == '':        res_list.remove('')    for m in range(len(res_list)- 1):        split_list = res_list[m].split("\x02")        for i in range(len(split_list)):            data_key = list(data[i].keys())[0]            data_values = list(data[i].values())[0]            if data_values == 'Y':                split_list[i] = decode(split_list[i])        list_result.append(split_list)    return list_resultdef compare_lists(list1,list2):    # # 存放环境1数据    envList1 = []    # # 存放环境2数据    envList2 = []    code_list = []    field_list = []    # 使用 DeepDiff 函数比较两个列表，并忽略元素的顺序    diff = DeepDiff(list1,list2)    if not diff:        logger.debug("对比结果一致")    else:        logger.info(f"存在差异===》'{diff}'")        if 'values_changed' in diff:            values_changed = diff['values_changed']            key_list = list(values_changed.keys())            val_list = list(values_changed.values())            print(key_list)            for i in val_list:                new_value = i['new_value']                old_value = i['old_value']                envList1.append(old_value)                envList2.append(new_value)            # print(envList1)            # print(envList2)            # for j in key_list:            #     m = re.findall(r'\[\'(.*?)\'\]' , j)            #     code_list.append(m[0])            #     field_list.append(m[1])            # print(code_list)            # print(field_list)def SseOptionQuote(url, header, **kwargs):    try:        response = requests.Session().get(url, headers=header)        response.raise_for_status()        return response    except requests.exceptions.RequestException as e:        logger.debug(f"Error while requesting url '{url}':{e}")        logger.debug(f"Error while request headers '{header}':{e}")        return Nonedef write_excel(json1,title):    excel_path = curPath + f'\\result\\{time}走势数据.xlsx'    if not os.path.exists(excel_path):        wr = pd.ExcelWriter(excel_path)        ew = pd.DataFrame(json1,columns=title)        ew.to_excel(wr,sheet_name=date,index=False)        wr.close()    else:        wr = pd.ExcelWriter(excel_path,mode="a",engine='openpyxl')        ew = pd.DataFrame(json1,columns=title)        ew.to_excel(wr,sheet_name=date,index=False)        wr.close()def excel_yaml_title():    keys_list = []    for i in data:        key_name = i.keys()        m = re.findall(r"'(.*?)'", str(key_name))        sheet_title = str(m).split("['")[1].split("']")[0]        keys_list.append(sheet_title)    return keys_listdef main():    stock_lists = []    with open(path, 'r', encoding='utf-8') as stock:        stock_list = json.load(stock)        stock_length = len(stock_list)        for stock_i in stock_list:            # stock_p = stock_i.get('p')            # stock_st = stock_i.get('st')            stock_s = stock_i.get('s')            # stock_t = stock_i.get('t')            stock_f = stock_i.get('f')            stock_n = stock_i.get('n')            stock_lists.append(stock_s)    for symbol in stock_lists:        headers = {            "token": "MitakeWeb",            "Symbol": symbol        }        headers1 = {            "token": "MitakeWeb",            "symbol": symbol        }        url1 = "http://114.141.177.9:22016/v4/lineall"        url2 = "http://114.28.169.94:22016/v4/lineall"        response_list1 = []        response_list2 = []        response1 = SseOptionQuote(url1, header=headers)        response2 = SseOptionQuote(url2, header=headers1)        # print(response1.text)        decode_response1 = decode_quote(response1.text)        decode_response2 = decode_quote(response2.text)        if response1:            response_list1.append(decode_response1)            logger.info(f"url1 success headers '{headers}'")        else:            logger.info(f"Failed to get response for url '{url1}'")        # logger.info(f"response_list1=====>'{response_list1}'")        if response2:            response_list2.append(decode_response2)            logger.info(f"url2 success headers '{headers}'")        else:            logger.info(f"Failed to get response for url '{url2}'")        compare_lists(response_list1,response_list2)if __name__ == '__main__':    main()